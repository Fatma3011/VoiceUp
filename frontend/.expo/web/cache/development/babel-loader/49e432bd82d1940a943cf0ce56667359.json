{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["\r\n// import {View,Text, Button,StyleSheet,Image} from \"react-native\";\r\n// import {Audio} from \"expo-av\";\r\n// import { useState,useRef } from \"react\";\r\n\r\n// const styles = StyleSheet.create({\r\n//     container: {\r\n//       flex: 1,\r\n//       justifyContent: 'center',\r\n//       backgroundColor: '#ecf0f1',\r\n//       padding: 8,\r\n//     },\r\n//     record :{\r\n//     alignItems: 'center',\r\n//     justifyContent: 'center',\r\n//     borderRadius:15,\r\n//     backgroundColor: 'black',\r\n//     marginBottom:9,\r\n//     width: 200, \r\n//     height: 30,\r\n//       },\r\n\r\n\r\n//   });\r\n\r\n\r\n// const Interface=()=>{\r\n//     const [recording, setRecording]=useState();\r\n//     const AudioPlayer = useRef(new Audio.Sound());\r\n//     const [IsPLaying, SetIsPLaying] = useState(false);\r\n//     const [URI, setUri]=useState('');\r\n//     const [messages,setMessages]=useState([/*{\r\n//         id: 1000,Uri:\"\", type:\"in\"\r\n//     }*/])\r\n//     const [Id,setId]=useState(0)\r\n\r\n//     const user_id=1234;//à modifier\r\n//     const talk_to_id=1478//à modifier\r\n//     async function startRecording(){\r\n//       try{\r\n\r\n//         console.log('Requesting Submission ....')\r\n//         await Audio.requestPermissionsAsync();\r\n//         await Audio.setAudioModeAsync({\r\n\r\n//             allowsRecordingIOS:true, playsInSilentModeIOS:true\r\n//         });\r\n//         console.log('start recording')\r\n//         const recording=new Audio.Recording();\r\n//         await recording.prepareToRecordAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY);\r\n//         await recording.startAsync();\r\n//         setRecording(recording)\r\n//         console.log('Recording started ...');\r\n\r\n//       } catch(err){\r\n\r\n//         console.error('Failed to start recording ',err)\r\n//       }\r\n\r\n//     }\r\n//     async function stopRecording(){\r\n\r\n//         console.log('Stop recording ')\r\n//         setRecording(undefined);\r\n//         await recording.stopAndUnloadAsync();\r\n//         const uri=recording.getURI();\r\n//         console.log(\"Recording stopped and stored at \",uri);\r\n//         setUri(uri);\r\n//         setMessages([... messages,{\r\n//             id: Id,Uri:uri, type:\"out\",time:new Date().toLocaleString('en-GB', { timeZone: 'UTC' })\r\n//         }])\r\n//         setId(Id+1)\r\n//         console.log(messages)\r\n//     }\r\n\r\n\r\n//     const PlayRecordedAudio = async (UR) => {\r\n//         try {\r\n//           // Load the Recorded URI\r\n//           await AudioPlayer.current.loadAsync({ uri: UR}, {}, true);\r\n//           // Get Player Status\r\n//           const playerStatus = await AudioPlayer.current.getStatusAsync();\r\n    \r\n//           // Play if song is loaded successfully\r\n//           if (playerStatus.isLoaded) {\r\n//             if (playerStatus.isPlaying === false) {\r\n//               AudioPlayer.current.playAsync();\r\n//               SetIsPLaying(true);\r\n//             }\r\n//           }\r\n//         } catch (error) {\r\n//           console.log(error);\r\n//         }\r\n//       };\r\n//       // Function to stop the playing audio\r\n//   const StopPlaying = async () => {\r\n//     try {\r\n//       //Get Player Status\r\n//       const playerStatus = await AudioPlayer.current.getStatusAsync();\r\n\r\n//       // If song is playing then stop it\r\n//       if (playerStatus.isLoaded === true)\r\n//         await AudioPlayer.current.unloadAsync();\r\n\r\n//       SetIsPLaying(false);\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   };\r\n\r\n//  const onpress=(rec)=>{\r\n//    SetIsPLaying(false);\r\n//        if(IsPLaying)\r\n//        {StopPlaying()}\r\n//        else\r\n//        PlayRecordedAudio(rec)\r\n//   }\r\n// return(\r\n\r\n// <View style={{flex: 1}}>\r\n// <View style={{height:\"6%\",justifyContent: 'center', alignItems:\"center\"}}>\r\n//   <Text>Ichrak</Text>\r\n// </View>\r\n// <View style={styles.container}>\r\n\r\n// {messages.length > 0 ? (\r\n//         <>\r\n//           <View>\r\n//           {messages.map((record) => (< View key={record.id}><Text style={{color:\"black\"}}  >{record.time}</Text>\r\n//               <View style={styles.record} >\r\n//                   <View  style={{borderRadius:12}}>\r\n//                       <Button title=\"\" onPress={()=>onpress(record.Uri)}></Button>\r\n//                   </View>\r\n//               </View></View>)  \r\n               \r\n//           )}\r\n//           </View>\r\n//         </>\r\n//       ) : (\r\n//        <Text>Say Hello!</Text>\r\n//       )}\r\n\r\n\r\n// </View>\r\n// <View style={{position: 'absolute', left: 0, right: 0, bottom: 0}}>\r\n// <Button title={recording?'Stop Recording':'Start Recording'}\r\n//     onPress={recording ? stopRecording :startRecording }>\r\n   \r\n// </Button>\r\n// </View>\r\n// </View>\r\n\r\n\r\n// );\r\n// }\r\n// export default Interface;"]},"metadata":{},"sourceType":"script"}